name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.10'

      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install poetry
            poetry install

      - name: Run pre-commit
        run: |
            poetry run pre-commit run --all-files

      - name: Test with pytest
        run: |
            poetry run pytest

  create-release:
    runs-on: ubuntu-latest
    needs: build
    steps:
        - uses: actions/checkout@v4

        - name: Set up Python
          uses: actions/setup-python@v5
          with:
                python-version: '3.10'

        - name: Install dependencies
          run: |
                python -m pip install --upgrade pip
                pip install poetry
                poetry install

        - name: Determine version bump
          id: determine_version
          run: >
            if git log -1 --pretty=%B | grep -iqE "major"; then
              echo "VERSION_BUMP=major" >> $GITHUB_ENV
            elif git log -1 --pretty=%B | grep -iqE "minor"; then
              echo "VERSION_BUMP=minor" >> $GITHUB_ENV
            else
              echo "VERSION_BUMP=patch" >> $GITHUB_ENV
            fi
          shell: bash

        - name: Bump version
          id: bump_version
          run: |
                poetry version ${{ env.VERSION_BUMP }}
                VERSION=$(poetry version -s)
                echo "VERSION=$VERSION" >> $GITHUB_ENV

        - name: Commit version bump
          run: |
                git config --global user.name "github-actions[bot]"
                git config --global user.email "github-actions[bot]@users.noreply.github.com"
                git commit -am "Bump version to $VERSION"
                git tag v$VERSION
                git push origin main --tags
          env:
                VERSION: ${{ env.VERSION }}
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        - name: Create GitHub Release
          uses: actions/create-release@v1
          env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
                tag_name: v${{ env.VERSION }}
                release_name: Release ${{ env.VERSION }}
                body: |
                    Automated release of version ${{ env.VERSION }}.
                draft: false
                prerelease: false
